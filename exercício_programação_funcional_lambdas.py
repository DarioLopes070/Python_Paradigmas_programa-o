# -*- coding: utf-8 -*-
"""Exercício_Programação_Funcional_Lambdas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lYFsLwAqbx5KwjO2F0LLDeK2GZUmanWx
"""

# Utilize map para dobrar cada elemento de uma lista.
l = [1, 2, 3, 4, 5, 6, 7]
map_list = list(map(lambda n:n*2, l))
print(map_list)

# Use filter para encontrar os números pares em uma lista.
l = [1, 2, 3, 4, 5, 6, 7]
e_Par = lambda n:n%2==0
lista_pares = list(filter(e_Par, l))
print(lista_pares)

# Utilize reduce para calcular o produto de todos os elementos em uma lista.
from functools import reduce
l = [1, 2, 3, 4, 5, 6, 7]
produto = reduce(lambda x,y: x*y, l)
print(produto)

# Use map para elevar ao quadrado cada elemento de uma lista.
l = [1, 2, 3, 4, 5, 6, 7]
map_list2 = list(map(lambda n:n**2, l))
print(map_list2)

# Utilize filter para encontrar os números ímpares em uma lista.
l = [1, 2, 3, 4, 5, 6, 7]
e_impar = lambda n:n%2!=0
lista_pares = list(filter(e_impar, l))
print(lista_pares)

# Use map para converter uma lista de temperaturas de Celsius para Fahrenheit.
l = [1, 2, 3, 4, 5, 6, 7, 37]
map_list3 = list(map(lambda n:n*1.8+32, l))
print(map_list3)

# Utilize reduce para calcular a soma dos quadrados de uma lista.
from functools import reduce
l = [1, 2, 3]
quadrados = reduce(lambda x,y: x + y, map(lambda x:x**2, l))
print(quadrados)

# Use filter para encontrar as palavras que começam com a letra 'a' em uma lista de strings.
l = ["Amor", "Barco", "Arco", "Corda", "Bola", "Antares", "azul", "Mexer", "Mexico"]
lista_A = list(filter(lambda x:x.lower().startswith('a'), l))
print(lista_A)

# Utilize map para converter uma lista de strings para seus respectivos tamanhos.
l = ["Amor", "Barco", "Arco", "Corda", "Bola", "Antares", "azul", "Mexer", "Mexico"]
map_list4 = list(map(len, l))
print(map_list4)

# Use reduce para calcular o produto de todos os elementos não nulos em uma lista.
from functools import reduce
l = [1, 2, 3, 4, 5, 6, 7, 0, 8, 0, 9]
produto1 = reduce(lambda x,y: x*y if (x and y)!=0 else x+y, l)
print(produto1)

# Utilize filter para encontrar os números primos em uma lista.
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
def is_primo(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
lista_primos = list(filter(is_primo, l))
print(lista_primos)

# Use map para converter uma lista de números em uma lista de strings.
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
map_list5 = list(map(str, l))
print(map_list5)

# Utilize reduce para encontrar o maior elemento em uma lista.
from functools import reduce
l = [1, 2, 3, 20, 4, 5, 6, 7]
produto = reduce(lambda x,y: x if x>y else y, l)
print(produto)

# Use filter para encontrar os anagramas de uma palavra em uma lista de strings.
l = ["Amor", "Barco", "Arco", "Corda", "Bola", "Antares", "azul", "Mexer", "Mexico", "Roma", "Orma"]
def is_anagram(word, test):
  return sorted(word.lower()) == sorted(test.lower())
word = str(input("Qual palavra quer buscar?"))
lista_C = list(filter(lambda x: is_anagram(word ,x), l))
print(lista_C)

# Utilize map para criar uma lista de listas, onde cada sublista contém os divisores de um número da lista original.
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
def divisores(n):
    # for i in range(1, n+1):
    #   if n%i==0:
    #     return i
    return [i for i in range(1, n+1) if n%i==0 ]

map_list6 = list(map(divisores, l))
print(map_list6)