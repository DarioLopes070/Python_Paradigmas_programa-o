# -*- coding: utf-8 -*-
"""Exercício_Programação_Funcional.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fEad1yIiTK8VG8oiGvNqtLZJMwof4CdY
"""

# 1. Crie uma função chamada "maior_numero" que recebe uma lista de números como argumento e retorna o maior número da lista.
numeros = [1, 60, 94, 2, 3, 4, 5, 6, 7, 8, 9, 10]
def maior_numero(lista):
  return max(lista)
maior_num = maior_numero(numeros)
print(maior_num)

# 2. Crie uma função chamada "contador_vogais" que recebe uma string como argumento e retorna a quantidade de vogais na string.
nome = str(input("Digite uma Palavra: "))
def contador_vogais(nome):
  count = 0
  for i in range(len(nome)):
    if(nome[i].lower()=='a' or nome[i].lower()=='e' or nome[i].lower()=='i' or nome[i].lower()=='o' or nome[i].lower()=='u'):
      count+=1
  return count
print(contador_vogais(nome))

# 3. Crie uma função chamada "verificar_palindromo" que recebe uma string como argumento e retorna True se a string for um palíndromo (ou seja, pode ser lida da mesma
# forma de trás para frente), e False caso contrário.

# def verificar_palindromo(string):
#     return string == string[::-1]

# print(verificar_palindromo("arara"))




def verificar_palindromo(nome):
  nome1=nome
  cont = len(nome)
  contador=0
  # print(cont)
  for i in range(len(nome)):
    # print(nome[i])
    # print(nome1[cont-1])
    if(nome[i]==nome1[cont-1]):
      contador+=1
    else:
      return False
    cont-=1
  if(contador==len(nome)):
    return True
  else:
    return False

nome = str(input("Digite um nome: "))
verificar_palindromo(nome)

# 4. Crie uma função chamada "calcular_media" que recebe uma lista de números como argumento e retorna a média aritmética dos elementos.
numeros = [1, 60, 94, 2, 3, 4, 5, 6, 7, 8, 9, 10]
def calcular_media(numeros):
  return sum(numeros)/len(numeros)

print(calcular_media(numeros))

# 5. Crie uma função chamada "calcular_potencia" que recebe dois números como argumentos: a base e o expoente. A função deve retornar a base elevada ao expoente.
def calcular_potencia(base, expoente):
  return base**expoente

print(calcular_potencia(5,2))

# 6. Crie uma função chamada "encontrar_primos" que recebe um número inteiro positivo como argumento e retorna uma lista com todos os números primos menores ou iguais
# ao número fornecido.
def is_primo(n):
  if n < 2:
    return False
  for i in range(2, int(n**0.5) + 1):
    if n % i == 0:
     return False
  return True

def encontrar_primos(n):
  primos=[]
  for i in range(2, n + 1):
    if is_primo(i):
      primos.append(i)
  return primos

n = int(input("Digite um numero: "))
if n < 0:
  print('Número deve ser maior ou igual a zero')
else:
  print(encontrar_primos(n))

# 7. Crie uma função chamada "contar_ocorrencias" que recebe uma lista de elementos e um elemento específico como argumentos, e retorna a quantidade de vezes que o
# elemento aparece na lista.
numeros = [1, 60, 94, 2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 2, 2, 2]
nomes = ["dario", "dario", "dario", "dario", "maria", "maria"]
def contar_ocorrencias(lista, elemento):
  count = 0
  for i in range(len(lista)):
    if(lista[i]==elemento):
      count+=1
  return count

verificar = contar_ocorrencias(numeros, 2)
verificar2 = contar_ocorrencias(nomes, 'dario')
print(verificar)
print(verificar2)

# 8. Crie uma função chamada "calcular_desconto" que recebe o valor de um produto e uma porcentagem de desconto como argumentos, e retorna o valor do produto
# com o desconto aplicado.
def calcular_desconto(valor, porcentagem):
  return valor - (valor*(porcentagem/100))
preco = float(input("Insira o valor do produto:"))
desconto = float(input("Insira a porcentagem do desconto:"))
print("Valor com Desconto: " , calcular_desconto(preco, desconto))

# 9. Crie uma função chamada "verificar_anagrama" que recebe duas strings como argumentos e retorna True se as strings forem anagramas (ou seja, possuírem as mesmas
# letras, independentemente da ordem), e False caso contrário.
def verificar_anagrama(word, test):
  return sorted(word.lower()) == sorted(test.lower())
palavra1 = str(input("Digite a primeira palavra: "))
palavra2 = str(input("Digite a segunda palavra: "))

print(verificar_anagrama(palavra1, palavra2))

# 10. Crie uma função chamada "encontrar_substring" que recebe uma string e uma substring como argumentos, e retorna True se a substring estiver presente na string, e
# False caso contrário.
def encontrar_substring(string, substring):
  return substring.lower() in string.lower()
frase1="bom dia, maria. Como voce esta?"
frase2="bom dia"
frase3="Maria"
frase4="Como voce esta?"
frase5="Dario"

print(encontrar_substring(frase1, frase2))
print(encontrar_substring(frase1, frase3))
print(encontrar_substring(frase1, frase4))
print(encontrar_substring(frase1, frase5))

# 11. Crie uma função chamada "ordenar_lista" que recebe uma lista de números como argumento e retorna uma nova lista contendo os mesmos números, porém
# ordenados de forma crescente.
numeros = [1, 60, 94, 2, 13, 3, 4, 34, 5, 6, 16, 7, 8, 9,]
def ordenar_lista(lista):
  newlista = sorted(lista)
  return newlista
print(ordenar_lista(numeros))

# 12. Crie uma função chamada "calcular_raiz_quadrada" que calcula a raiz quadrada de um número sem utilizar a função de raiz quadrada embutida do Python (math.sqrt).
# A função deve retornar o resultado com uma precisão de duas casas decimais.
def calcular_raiz_quadrada(numero):
  return numero**(1/2)
num = float(input("Digite o numero desejado: "))
resultado = calcular_raiz_quadrada(num)
print(f"Resultado = {resultado:.2f}")

# 13. Crie uma função chamada quadrado que recebe dois parâmetros, um para a base e outro para a altura mostre um quadrado feito por asteriscos.
# Por exemplo, para os valores 5 e 3 a saída de ser:
# * * * * *
# * * * * *
# * * * * *

def quadrado(base, altura):
  for i in range (altura):
    for j in range(base):
      # lista[i][j]="*"
      print(" * ", end = "")
    print("")
quadrado(8, 8)

# 14. Crie uma função chamada quadrado que recebe dois parâmetros, um para a base e outro para a altura mostre a borda de uma quadrado feito por asteriscos.
# Por exemplo, para os valores 5 e 3 a saída de ser:
# * * * * *
# *       *
# * * * * *

# def quadrado(base, altura):
#   for i in range (altura):
#     for j in range(base):
#       # lista[i][j]="*"
#       print(" * ", end = "")
#     print("")
# quadrado(8, 8)








def desenhaQuadrado(base, altura ):
  simbolo = ' * '
  preenchimento = '   '
  print(simbolo * base)
  for _ in range(altura-2):
    print('{}{}{}'.format(simbolo, preenchimento * (base-2), simbolo))
  print(simbolo * base)

print('Um quadrado:')
desenhaQuadrado(7, 10)

print('\nOutro quadrado:')
desenhaQuadrado(5, 3)